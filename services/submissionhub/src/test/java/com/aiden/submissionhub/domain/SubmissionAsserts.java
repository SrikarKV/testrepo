package com.aiden.submissionhub.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SubmissionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubmissionAllPropertiesEquals(Submission expected, Submission actual) {
        assertSubmissionAutoGeneratedPropertiesEquals(expected, actual);
        assertSubmissionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubmissionAllUpdatablePropertiesEquals(Submission expected, Submission actual) {
        assertSubmissionUpdatableFieldsEquals(expected, actual);
        assertSubmissionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubmissionAutoGeneratedPropertiesEquals(Submission expected, Submission actual) {
        assertThat(expected)
            .as("Verify Submission auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubmissionUpdatableFieldsEquals(Submission expected, Submission actual) {
        assertThat(expected)
            .as("Verify Submission relevant properties")
            .satisfies(e -> assertThat(e.getCaseId()).as("check caseId").isEqualTo(actual.getCaseId()))
            .satisfies(e -> assertThat(e.getSubmissionStatus()).as("check submissionStatus").isEqualTo(actual.getSubmissionStatus()))
            .satisfies(e -> assertThat(e.getInsuredName()).as("check insuredName").isEqualTo(actual.getInsuredName()))
            .satisfies(e -> assertThat(e.getAssignTo()).as("check assignTo").isEqualTo(actual.getAssignTo()))
            .satisfies(e -> assertThat(e.getAssignToEmail()).as("check assignToEmail").isEqualTo(actual.getAssignToEmail()))
            .satisfies(e -> assertThat(e.getAssignedBY()).as("check assignedBY").isEqualTo(actual.getAssignedBY()))
            .satisfies(e -> assertThat(e.getAssignedByEmail()).as("check assignedByEmail").isEqualTo(actual.getAssignedByEmail()))
            .satisfies(e -> assertThat(e.getTaskDueDate()).as("check taskDueDate").isEqualTo(actual.getTaskDueDate()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubmissionUpdatableRelationshipsEquals(Submission expected, Submission actual) {
        // empty method
    }
}
